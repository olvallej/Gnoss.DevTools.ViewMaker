@*[security|||shared/_cabecera/_menu-navegacion-comunidad.cshtml|||ak0825ovtfi]*@
@using Es.Riam.Gnoss.Web.MVC.Models;
@if (Html.GetComunidad() != null)
{
@*
Descripción
----------------------------------------------------------------
Menú de navegación para la comunidad. Corresponde con el menú que aparecerá debajo del nombre y tipo de la comunidad en la que se encuentra el ususario.
Este menú será visible si el usuario está logeado, aunque no hará falta controlarlo ya que aparecería en el header de la comunidad
- Home
- Índice
- Recursos
- Debates
- Preguntas
- Encuestas 
- Personas y organizaciones
- Acerca de...
@*
Variables
----------------------------------------------------------------
*@
CommunityModel Comunidad = Html.GetComunidad();
UserIdentityModel IdentidadActual = Html.GetIdentidadActual();
string claseOcultarCommunityRow= "";

// Mensaje informativo de acceso a comunidad restringida/privada
string accessRestrictedCommunityMessage = "";
string accessRestrictedCommunityUrl = "";
string buttonText = "";
string buttonClass = "";
string communityDescription = Html.ExtractValueInStringFromStartAndEnd(Comunidad.Description, "<p>", "</p>");

@*
----------------------------------------------------------------
-------------------- Menú Navegación de la Comunidad --------------------
*@


@* Controlar mensaje de acceso a comunidad privada/restringida *@
if (IdentidadActual.IsGuestIdentity) {

    @* Controlar la visualización en la Home de la comunidad dependiendo del tipo de Comunidad a visualizar*@
    switch ((CommunityModel.TypeAccessProject)Comunidad.AccessType)
    {
        case CommunityModel.TypeAccessProject.Public:
            //Comunidad pública        
            accessRestrictedCommunityUrl = $"{@Comunidad.Url}/{@Html.GetText("URLSEM", "HAZTEMIEMBRO")}";
            accessRestrictedCommunityMessage = @Html.GetText("COMINICIOLOGIN", "TIENESQUEHACERTEMIEMBRO");
            if (IdentidadActual.IsGuestUser)
            {
                buttonText = @Html.GetText("COMINICIOLOGIN", "HAZTEMIEMBROPARTICIPA");
            }
            else
            {
                buttonText = @Html.GetText("COMINICIOLOGIN", "HAZTEMIEMBROPARTICIPA");
            }            
            break;

        case CommunityModel.TypeAccessProject.Restricted:
            //Comunidad Restringida
            switch (IdentidadActual.CommunityRequestStatus)
            {
                case UserIdentityModel.CommunityRequestStatusEnum.NoRequest:
                    buttonClass = "pedir-acceso";
                    accessRestrictedCommunityUrl = $"{@Comunidad.Url}/{@Html.GetText("URLSEM", "SOLICITARACCESO")}";
                    accessRestrictedCommunityMessage = @Html.GetText("COMINICIOLOGIN", "TIENESQUESOLICITAR");
                    buttonText = @Html.GetText("COMINICIOLOGIN", "SOLICITARACCESO");                    
                    break;
                case UserIdentityModel.CommunityRequestStatusEnum.RequestPending:
                    accessRestrictedCommunityMessage = @Html.GetText("COMINICIOLOGIN", "SOLICITUDPENDIENTE");                    
                    break;

                case UserIdentityModel.CommunityRequestStatusEnum.RequestedWithAnotherProfile:
                    accessRestrictedCommunityMessage = @Html.GetText("COMINICIOLOGIN", "SOLICITUDPENDIENTEOTROPERFIL");                    
                    break;
            }
            break;

        default:
            //Comunidad Reservada y Privada
            accessRestrictedCommunityMessage = @Html.GetText("COMINICIOLOGIN", "NOACCESOPROY");            
            break;
    }
}

@* Ocultar o no la fila de comunidades para móvil si la comunidad principal es la misma que la metaComunidad *@
@if (Comunidad.NameMetaComunidad.ToLower().Equals(Comunidad.Name.ToLower())) {
    claseOcultarCommunityRow = "d-none";
}


@* Mostrar "Mostrar Menú de Navegación de la Comunidad - Desktop y Móvil"*@
<div class="row community-row @claseOcultarCommunityRow">
    <div class="community-menu-wrapper">
        @* Mostrar el menú trigger de la MetaComunidad si la MetaComunidad es diferente al nombre de la comunidad *@
        @if (!Comunidad.NameMetaComunidad.ToLower().Equals(Comunidad.Name.ToLower()))
        {
            <a href="javascript: void(0);"
               id="menuLateralComunidadTrigger"
               data-target="menuLateralComunidad"
               class="texto-blanco">
                <span class="material-icons">menu</span>
            </a>
        }

        <div class="page-name-wrapper">
            <span class="page-name">@Comunidad.Name</span>
        </div>
        <div id="community-menu" class="">
            <ul>
                @{
                    bool pintarEnlaces = true;
                    if (IdentidadActual.IsGuestIdentity && (Comunidad.ProjectState == CommunityModel.StateProject.Definition || Comunidad.ProjectState == CommunityModel.StateProject.Close || Comunidad.ProjectState == CommunityModel.StateProject.CloseTemporaly))
                    {
                        pintarEnlaces = false;
                    }
                    foreach (CommunityModel.TabModel pPestanya in Comunidad.Tabs)
                    {
                        PintarPestanyaCabecera pintar = new PintarPestanyaCabecera();
                        pintar.pPestanya = pPestanya;
                        pintar.pPintarEnlaces = pintarEnlaces;
                        @Html.PartialView("../Shared/_cabecera/_PintarPestanya", pintar);
                    }
                }

                    @* Pintar Ver Más en Menú si hay más items que anchura en Header *@
                    <li class="level01 showMore con-sub-menu d-none">
                        <a href="javascript: void(0);">
                            @Html.GetText("COMBUSQUEDAAVANZADA","VERMAS")
                        </a>
                        <a class="sub-menu-toggle"></a>
                        <ul class="sub-menu" id="submenu_showMore">
                        </ul>
                    </li>
            </ul>
        </div>
    </div>

    @* Tooltip informativo de la Comunidad actual *@
    @if (Comunidad != null)
    {
        <div class="tooltip comunidad" role="tooltip">
            <div class="tooltip-arrow"></div>
            <div class="tooltip-inner">
                <span class="material-icons cerrar">close</span>
                <div class="d-flex">
                    @* Controlar posible Logo de Comunidad *@
                    @if (!string.IsNullOrEmpty(Comunidad.Logo))
                    {
                        <div class="col-imagen con-icono-before">
                            <img alt="@Comunidad.Name" title="@Comunidad.Name" src="@Comunidad.Logo" />
                        </div>
                    }
                    else
                    {
                        <div class="col-imagen icono-mundo con-icono-before"></div>
                    }

                    <div class="col-datos">
                        <p class="tooltip-title">@Html.Raw(Html.getCommunityNameType(Comunidad))</p>
                        <p>@Comunidad.Name</p>
                        <div class="d-flex flex-wrap">
                            <p class="tipo-comunidad">
                                @* Mostrar icono de tipo de comunidad *@
                                @{string communityIconType = Html.getCommunityIconType(Comunidad);}
                                <span class="material-icons comunidad">@communityIconType</span>
                                <span>@Html.Raw(Html.getCommunityNameType(Comunidad))</span>
                            </p>
                            @if (!string.IsNullOrEmpty(accessRestrictedCommunityUrl))
                            {
                                <a href="@accessRestrictedCommunityUrl" class="btn btn-primary btn-round acceso @buttonClass">@buttonText</a>
                            }
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(communityDescription)){
                    <p>
                        @* @Html.Raw(Comunidad.Description) *@
                        @Html.Raw(communityDescription)
                    </p>
                }
                @{ string urlAcercaDe = $"{@Comunidad.Url}/{@Html.GetText("URLSEM", "ACERCADE")}";}
                <a href="@urlAcercaDe">
                    @Html.GetText("COMMON", "ADMINCOMTITINFORMACION")                    
                    <span class="material-icons">keyboard_arrow_right</span>
                </a>
                <ul class="no-list-style d-flex align-items-center">
                    <li>
                        @{ string urlRecursos = $"{@Comunidad.Url}/{@Html.GetText("URLSEM", "RECURSOS")}";}
                        <a href="@urlRecursos">
                            Recursos<span class="numResultados">(@Comunidad.NumberOfResources)</span>
                        </a>
                    </li>                    
                    <li>
                        @{ string urlPersonas = $"{@Comunidad.Url}/{@Html.GetText("URLSEM", "PERSONASYORGANIZACIONES")}";}
                        <a href="@urlPersonas">
                            Personas<span class="numResultados">(@Comunidad.NumberOfPerson)</span>
                        </a>
                    </li>                    
                </ul>           
            </div>
        </div>
    }

    @* Menú Lateral de navegación de Comunidad para móviles *@
    <aside id="menuLateralComunidad"
           class="menuLateral comunidad"
           role="navigation">
            <div class="header text-warning bg-dark">
            <div class="wrap-header">
                <div class="menu-logo-wrapper">
                    <div class="menu-toggle">
                        <a href="javascript: void(0);"
                           class="cerrar texto-blanco">
                            <span class="material-icons">menu</span>
                        </a>
                    </div>
                    <div class="logo-wrapper">
                        <a href="@Comunidad.Url" class="texto-blanco">
                            @Comunidad.Name
                        </a>
                    </div>
                </div>
            </div>
            <span class="material-icons cerrar">close</span>
        </div>

        <div class="body custom-css-scroll">
            <div id="community-menu-movil">
                <p class="title">Navegación</p>
                <ul class="nav pmd-sidebar-nav">
                    @{
                        bool pintarEnlacesMovil = true;
                        if (IdentidadActual.IsGuestIdentity && (Comunidad.ProjectState == CommunityModel.StateProject.Definition || Comunidad.ProjectState == CommunityModel.StateProject.Close || Comunidad.ProjectState == CommunityModel.StateProject.CloseTemporaly))
                        {
                            pintarEnlacesMovil = false;
                        }
                        foreach (CommunityModel.TabModel pPestanya in Comunidad.Tabs)
                        {
                            PintarPestanyaCabecera pintar = new PintarPestanyaCabecera();
                            pintar.pPestanya = pPestanya;
                            pintar.pPintarEnlaces = pintarEnlacesMovil;
                            @Html.PartialView("../Shared/_cabecera/_PintarPestanya", pintar);
                        }
                    }
                </ul>
            </div>
        </div>
    </aside>
    <!-- <div class="pmd-sidebar-overlay" data-rel="menuLateralComunidad"></div> -->
</div>
}

