@model SolicitudesGrupoViewModel
@*
Descripción
-----------------------------------------------
Vista que se utiliza para mostrar un paginador para mostrar las páginas de resultados existentes.
Se trata de una nueva vista que se añade en una vista parcial sacada de la vista "CargarResultados"

Variables
----------------------------------------------------------------
*@
@{
int NUM_PAG_INICIO = 3;
int NUM_PAG_PROX_CENTRO = 2;
int NUM_PAG_FIN = 3;


int numTotal = Model.NumPaginas;
int numResultadosPagina = 10;
int PaginaActual = Model.PaginaActual;
string urlNavegador = Model.UrlPagina;

}

@*
----------------------------------------------------------------
-------------------- Vista parcial que muestra un paginador de resultados --------------------
*@


@{
    if (urlNavegador.Contains("?"))
    {
        string[] filtros = urlNavegador.Substring(urlNavegador.IndexOf("?") + 1).Split('&');
        urlNavegador = urlNavegador.Substring(0, urlNavegador.IndexOf("?") + 1);

        foreach (string filtro in filtros)
        {
            if (!filtro.Contains("pagina="))
            {
                urlNavegador += filtro + "&";
            }
        }
        urlNavegador = urlNavegador.Substring(0, urlNavegador.Length - 1);
    }

    if (urlNavegador.Contains("?"))
    {
        urlNavegador += "&";
    }
    else
    {
        urlNavegador += "?";
    }

    int numPaginas = (int)Math.Ceiling((double)numTotal / (double)numResultadosPagina);

    @* Contenedor de Pagiinador *@
    if (numPaginas > 1)
    {
        <nav id="navegadorRemover" aria-label="Paginador de resultados">
            <ul id="NavegadorPaginasCorreo" class="pagination paginadorResultados d-flex justify-content-end">
                @if (PaginaActual == 1)
                {
                    <li class="page-item disabled">
                        <a class="page-link">@Html.GetText("COMMON", "PAGANTERIOR")</a>
                    </li>
                }
                else
                {
                    string url = urlNavegador + "pagina=1";
                    <li class="page-item">
                        <a href="@url" name="pagina|@Html.Raw((PaginaActual - 1).ToString())" class="page-link indiceNavegacion filtro primeraPagina">@Html.GetText("COMMON", "PAGANTERIOR")</a>
                    </li>
                }

                @{
                    //INICIO
                    for (int i = 1; i <= NUM_PAG_INICIO; i++)
                    {
                        if (i > numPaginas) //Hemos excedio el número máximo de páginas, así que dejamos de pintar.
                        {
                            break;
                        }

                        if (i == PaginaActual)
                        {
                            <li class="page-item active">
                                <a class="page-link actual indiceNavegacion">@i</a>
                            </li>
                        }
                        else
                        {
                            string url = urlNavegador + "pagina=" + i;
                            <li class="page-item">
                                <a href="@url" name="pagina|@i" class="page-link indiceNavegacion filtro">@i</a>
                            </li>

                        }
                    }

                    if (numPaginas > NUM_PAG_INICIO) //Continuamos si ha más páginas que las que ya hemos pintado
                    {
                        int inicioRango = PaginaActual - NUM_PAG_PROX_CENTRO;
                        int finRango = PaginaActual + NUM_PAG_PROX_CENTRO;

                        if (PaginaActual < (NUM_PAG_INICIO + NUM_PAG_PROX_CENTRO + 1))
                        {
                            inicioRango = NUM_PAG_INICIO + 1;
                            if (PaginaActual <= NUM_PAG_INICIO) //En el rango de las primeras
                            {
                                finRango = PaginaActual + NUM_PAG_INICIO + NUM_PAG_PROX_CENTRO - 1;
                            }
                            else
                            {
                                finRango = NUM_PAG_INICIO + (2 * NUM_PAG_PROX_CENTRO) + 1; //Ultimo número de la serie.
                            }
                        }
                        else if (PaginaActual > (numPaginas - NUM_PAG_FIN - NUM_PAG_PROX_CENTRO))
                        {
                            finRango = numPaginas - NUM_PAG_FIN;
                            if (PaginaActual > numPaginas - NUM_PAG_FIN) //En el rango de las últimas
                            {
                                inicioRango = PaginaActual - NUM_PAG_FIN - NUM_PAG_PROX_CENTRO + 1;//finRango - (pNumPaginas - PaginaActual + 1);
                            }
                            else
                            {
                                inicioRango = numPaginas - (NUM_PAG_FIN + (2 * NUM_PAG_PROX_CENTRO)); //Ultimo número de la serie empezando atrás.
                            }

                            //Avanzamos el inicio de la zona final para que no agrege páginas ya pintadas
                            while (inicioRango <= NUM_PAG_INICIO)
                            {
                                inicioRango++;
                            }
                        }

                        if (inicioRango > (NUM_PAG_INICIO + 1))
                        {
                            <li class="page-item separador">...</li>
                        }

                        for (int i = inicioRango; i <= finRango; i++)
                        {
                            if (i > numPaginas) //Hemos excedio el número máximo de páginas, así que dejamos de pintar.
                            {
                                break;
                            }

                            if (i == PaginaActual)
                            {
                                <li class="page-item active">
                                    <a class="page-link indiceNavegacion filtro">@i</a>
                                </li>
                            }
                            else
                            {
                                string url = urlNavegador + "pagina=" + i;
                                <li class="page-item">
                                    <a href="@url" name="pagina|@i" class="page-link indiceNavegacion filtro">@i</a>
                                </li>
                            }
                        }

                        if (finRango < numPaginas)
                        {
                            //Continuamos si ha más páginas que las que ya hemos pintado
                            inicioRango = numPaginas - NUM_PAG_FIN + 1;

                            if ((inicioRango - 1) > finRango)
                            {
                                <li class="page-item separador">...</li>
                            }

                            //Avanzamos el inicio de la zona final para que no agrege páginas ya pintadas
                            while (inicioRango <= finRango)
                            {
                                inicioRango++;
                            }

                            finRango = numPaginas;

                            for (int i = inicioRango; i <= finRango; i++)
                            {
                                if (i > numPaginas) //Hemos excedio el número máximo de páginas, así que dejamos de pintar.
                                {
                                    break;
                                }

                                if (i == PaginaActual)
                                {
                                    <li class="page-item active">
                                        <a class="page-link actual indiceNavegacion">@i</a>
                                    </li>
                                }
                                else
                                {
                                    string url = urlNavegador + "pagina=" + i;
                                    <li class="page-item">
                                        <a href="@url" name="pagina|@i" class="page-link actual indiceNavegacion filtro">@i</a>
                                    </li>
                                }
                            }
                        }
                    }
                    if (PaginaActual == numPaginas)
                    {
                        <li class="page-item">
                            <a class="page-link deshabilitado ultimaPagina">@Html.GetText("COMMON", "PAGSIGUIENTE")</a>
                        </li>
                    }
                    else
                    {
                        string url = urlNavegador + "pagina=" + ++PaginaActual;
                        <li class="page-item">
                            <a href="@url" name="pagina|@Html.Raw((PaginaActual).ToString())" class="page-link indiceNavegacion filtro ultimaPagina">@Html.GetText("COMMON", "PAGSIGUIENTE")</a>
                        </li>

                    }
                }
            </ul>
        </nav>
    }
}
